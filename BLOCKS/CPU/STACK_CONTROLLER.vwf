/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 2000.0;
	SIMULATION_TIME = 2000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("counter")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("counter[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter";
}

SIGNAL("counter[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter";
}

SIGNAL("DATA")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("DATA[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("DATA[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "DATA";
}

SIGNAL("over_flag")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("SP_OUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("SP_OUT[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "SP_OUT";
}

SIGNAL("SP_OUT[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "SP_OUT";
}

SIGNAL("STACK_OUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("STACK_OUT[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("STACK_OUT[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "STACK_OUT";
}

SIGNAL("CONTROL_BUS[21]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("CONTROL_BUS[22]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("CONTROL_BUS[23]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("CONTROL_BUS[21]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("CONTROL_BUS[22]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("CONTROL_BUS[23]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("counter[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 11;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("counter[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 11;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("DATA[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 520.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 350.0;
	}
}

TRANSITION_LIST("DATA[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 420.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("DATA[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 600.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("DATA[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 650.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 1270.0;
	}
}

TRANSITION_LIST("DATA[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 550.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 440.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 350.0;
	}
}

TRANSITION_LIST("DATA[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1570.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("DATA[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1170.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("DATA[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2000.0;
	}
}

TRANSITION_LIST("over_flag")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 470.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 490.0;
	}
}

TRANSITION_LIST("SP_OUT[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 90.0;
	}
}

TRANSITION_LIST("SP_OUT[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 720.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 190.0;
	}
}

TRANSITION_LIST("STACK_OUT[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 600.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 320.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 90.0;
	}
}

TRANSITION_LIST("STACK_OUT[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 520.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 400.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 190.0;
	}
}

TRANSITION_LIST("STACK_OUT[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 190.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 720.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 790.0;
	}
}

TRANSITION_LIST("STACK_OUT[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2000.0;
	}
}

TRANSITION_LIST("STACK_OUT[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1210.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 320.0;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 90.0;
	}
}

TRANSITION_LIST("STACK_OUT[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1610.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 190.0;
	}
}

TRANSITION_LIST("STACK_OUT[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1210.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 320.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 190.0;
	}
}

TRANSITION_LIST("STACK_OUT[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2000.0;
	}
}

TRANSITION_LIST("CONTROL_BUS[21]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 1;
				LEVEL 1 FOR 80.0;
			}
		}
		LEVEL 0 FOR 440.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 320.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 1;
				LEVEL 1 FOR 80.0;
			}
		}
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("CONTROL_BUS[22]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 770.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 1;
				LEVEL 1 FOR 80.0;
			}
		}
		LEVEL 0 FOR 220.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 1;
				LEVEL 1 FOR 80.0;
			}
		}
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("CONTROL_BUS[23]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2000.0;
	}
}

TRANSITION_LIST("CONTROL_BUS[21]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 440.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 250.0;
	}
}

TRANSITION_LIST("CONTROL_BUS[22]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 770.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("CONTROL_BUS[23]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 830.0;
		NODE
		{
			REPEAT = 3;
			LEVEL X FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL X FOR 20.0;
		LEVEL 0 FOR 180.0;
		LEVEL X FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL X FOR 20.0;
		LEVEL 0 FOR 380.0;
		LEVEL X FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL X FOR 20.0;
		LEVEL 0 FOR 50.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "counter";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3;
}

DISPLAY_LINE
{
	CHANNEL = "counter[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "counter[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "DATA";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8, 9, 10, 11, 12;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "DATA[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "over_flag";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "SP_OUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "SP_OUT[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "SP_OUT[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
	CHILDREN = 18, 19, 20, 21, 22, 23, 24, 25;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "STACK_OUT[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "CONTROL_BUS[21]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CONTROL_BUS[22]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CONTROL_BUS[23]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CONTROL_BUS[21]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CONTROL_BUS[22]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CONTROL_BUS[23]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 29725;
	MASTER = TRUE;
}
;
